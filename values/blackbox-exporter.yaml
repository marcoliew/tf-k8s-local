
# # Hostaliases allow to add additional DNS entries to be injected directly into pods.
# # This will take precedence over your implemented DNS solution
# hostAliases: []
# #  - ip: 192.168.1.1
# #    hostNames:
# #      - test.example.com
# #      - another.example.net

# serviceMonitor:
#   ## If true, a ServiceMonitor CRD is created for a prometheus operator
#   ## https://github.com/coreos/prometheus-operator for blackbox-exporter itself
#   ##
#   selfMonitor:
#     enabled: true
#     path: /metrics
#     scheme: http
#     interval: 30s
#     scrapeTimeout: 30s
#     ## Port can be defined by assigning a value for the port key below
#     ## port:

#   ## If true, a ServiceMonitor CRD is created for a prometheus operator
#   ## https://github.com/coreos/prometheus-operator for each target
#   ##
#   enabled: true

#   # Default values that will be used for all ServiceMonitors created by `targets`
#   defaults:
#     additionalMetricsRelabels: {}
#     additionalRelabeling: []
#     labels: {}
#     interval: 30s
#     scrapeTimeout: 30s
#     module: http_2xx
#   ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
#   scheme: http
#   ## path: HTTP path. Needs to be adjusted, if web.route-prefix is set
#   path: "/probe"
#   ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
#   ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
#   tlsConfig: {}
#   bearerTokenFile:

#   targets:
# #    - name: example                    # Human readable URL that will appear in Prometheus / AlertManager
# #      url: http://example.com/healthz  # The URL that blackbox will scrape
# #      hostname: example.com            # HTTP probes can accept an additional `hostname` parameter that will set `Host` header and TLS SNI
# #      labels: {}                       # Map of labels for ServiceMonitor. Overrides value set in `defaults`
# #      interval: 60s                    # Scraping interval. Overrides value set in `defaults`
# #      scrapeTimeout: 60s               # Scrape timeout. Overrides value set in `defaults`
# #      module: http_2xx                 # Module used for scraping. Overrides value set in `defaults`
# #      additionalMetricsRelabels: {}    # Map of metric labels and values to add
# #      additionalRelabeling: []         # List of metric relabeling actions to run

# ## Custom PrometheusRules to be defined
# ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
# prometheusRule:
#   enabled: false
#   additionalLabels: {}
#   namespace: ""
#   rules: []



#   targets:
# #    - name: example                    # Human readable URL that will appear in Google Managed Prometheus / AlertManager
# #      url: http://example.com/healthz  # The URL that blackbox will scrape
# #      hostname: example.com            # HTTP probes can accept an additional `hostname` parameter that will set `Host` header and TLS SNI
# #      labels: {}                       # Map of labels for PodMonitoring. Overrides value set in `defaults`
# #      interval: 60s                    # Scraping interval. Overrides value set in `defaults`
# #      scrapeTimeout: 60s               # Scrape timeout. Overrides value set in `defaults`
# #      module: http_2xx                 # Module used for scraping. Overrides value set in `defaults`
# #      additionalMetricsRelabels: {}    # Map of metric labels and values to add



# # global common labels, applied to all ressources
# commonLabels: {}


configReloader:
  enabled: true
  containerPort: 8080
  config:
    logFormat: logfmt
    logLevel: info
    watchInterval: 1m
  image:
    registry: quay.io
    repository: prometheus-operator/prometheus-config-reloader
    tag: "v0.71.2"
    pullPolicy: IfNotPresent
    digest: ""
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
  resources:
    limits:
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 20Mi
  livenessProbe:
    httpGet:
      path: /healthz
      port: reloader-web
      scheme: HTTP
  readinessProbe:
    httpGet:
      path: /healthz
      port: reloader-web
      scheme: HTTP
  service:
    port: 8080
  serviceMonitor:
    selfMonitor:
      additionalMetricsRelabels: {}
      additionalRelabeling: []
      path: /metrics
      scheme: http
      tlsConfig: {}
      interval: 30s
      scrapeTimeout: 30s
