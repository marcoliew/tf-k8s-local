---
defaultRules:   # 
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: false
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: false
    nodeExporterRecording: false
    prometheus: true
    prometheusOperator: true
    windows: true
commonLabels:
  prometheus: selected
  
nodeExporter:
  enabled: false

kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
kubeControllerManager:
  enabled: false
kubeProxy:
  enabled: true

grafana:
  enabled: true
  adminPassword: abc123
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      # cert-manager.io/cluster-issuer: dns-01-production
    hosts:
      - grafana.localhost
    #path: /grafana
prometheus:
  enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      #cert-manager.io/cluster-issuer: dns-01-production
    hosts:
      - localhost
    path: /prometheus

  prometheusSpec:

    ruleSelector:
      # matchLabels:
      #   prometheus: selected
      matchExpressions:
       - key: prometheus
         operator: In
         values:
         - selected    

    probeSelector:
      matchLabels:
        prometheus: selected

    podMonitorSelector:
      matchLabels:
        prometheus: selected

    ## If nil, select own namespace. Namespaces to be selected for PodMonitor discovery.
    podMonitorNamespaceSelector:
      matchLabels:
        monitoring: prometheus

    ## Example which selects ServiceMonitors with label "prometheus" set to "somelabel"
    serviceMonitorSelector:
      matchLabels:
        prometheus: selected
        #release: prometheus-stack

    ## Namespaces to be selected for ServiceMonitor discovery.

    ## Example which selects ServiceMonitors in namespaces with label "prometheus" set to "somelabel"
    # serviceMonitorNamespaceSelector:
    #   matchLabels:
    #     monitoring: prometheus     

    # storageSpec:
    #   volumeClaimTemplate:
    #     spec:
    #       #storageClassName: gp2
    #       accessModes: ["ReadWriteOnce"]
    #       resources:
    #         requests:
    #           storage: 5Gi

## Deploy alertmanager
##
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: "https://hooks.slack.com/services/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"
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - match:
          alertname: DeadMansSwitch
        receiver: 'null'
      - match:
        receiver: 'slack'
        continue: true
    receivers:
    - name: 'null'
    - name: 'slack'
      slack_configs:
      - channel: '#alerts'
        send_resolved: false
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: >-
          {{ range .Alerts }}
            *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
            *Description:* {{ .Annotations.description }}
            *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}

## Component scraping kube state metrics
##
kubeStateMetrics:
  enabled: true
kube-state-metrics:
  prometheus:
    monitor:
      enabled: true
      additionalLabels:
        prometheus: selected